/**
 * ProNimbusAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Result1
 */
class Result1 extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.city = this.constructor.getValue(obj.city || obj.City);
        this.distance = this.constructor.getValue(obj.distance || obj.Distance);
        this.country = this.constructor.getValue(obj.country || obj.Country);
        this.company = this.constructor.getValue(obj.company || obj.Company);
        this.units = this.constructor.getValue(obj.units || obj.Units);
        this.state = this.constructor.getValue(obj.state || obj.State);
        this.addressLine2 = this.constructor.getValue(obj.addressLine2 || obj.AddressLine2);
        this.addressLine1 = this.constructor.getValue(obj.addressLine1 || obj.AddressLine1);
        this.postalCode = this.constructor.getValue(obj.postalCode || obj.PostalCode);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'city', realName: 'City' },
            { name: 'distance', realName: 'Distance' },
            { name: 'country', realName: 'Country' },
            { name: 'company', realName: 'Company' },
            { name: 'units', realName: 'Units' },
            { name: 'state', realName: 'State' },
            { name: 'addressLine2', realName: 'AddressLine2' },
            { name: 'addressLine1', realName: 'AddressLine1' },
            { name: 'postalCode', realName: 'PostalCode' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Result1;
