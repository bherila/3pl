/**
 * ProNimbusAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of InventoryItem
 */
class InventoryItem extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.facility = this.constructor.getValue(obj.facility);
        this.sku = this.constructor.getValue(obj.sku);
        this.errorMessage = this.constructor.getValue(obj.errorMessage);
        this.quantityOnHand = this.constructor.getValue(obj.quantityOnHand);
        this.quantityOnHold = this.constructor.getValue(obj.quantityOnHold);
        this.quantityDamaged = this.constructor.getValue(obj.quantityDamaged);
        this.quantityMissing = this.constructor.getValue(obj.quantityMissing);
        this.quantityInventoryAllocated = this.constructor.getValue(obj.quantityInventoryAllocated);
        this.quantityAvailable = this.constructor.getValue(obj.quantityAvailable);
        this.quantityNotAllocated = this.constructor.getValue(obj.quantityNotAllocated);
        this.quantityNeeded = this.constructor.getValue(obj.quantityNeeded);
        this.quantityInvalid = this.constructor.getValue(obj.quantityInvalid);
        this.quantityRequested = this.constructor.getValue(obj.quantityRequested);
        this.quantityAllocated = this.constructor.getValue(obj.quantityAllocated);
        this.quantityTotal = this.constructor.getValue(obj.quantityTotal);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'facility', realName: 'facility' },
            { name: 'sku', realName: 'sku' },
            { name: 'errorMessage', realName: 'errorMessage' },
            { name: 'quantityOnHand', realName: 'quantityOnHand' },
            { name: 'quantityOnHold', realName: 'quantityOnHold' },
            { name: 'quantityDamaged', realName: 'quantityDamaged' },
            { name: 'quantityMissing', realName: 'quantityMissing' },
            { name: 'quantityInventoryAllocated', realName: 'quantityInventoryAllocated' },
            { name: 'quantityAvailable', realName: 'quantityAvailable' },
            { name: 'quantityNotAllocated', realName: 'quantityNotAllocated' },
            { name: 'quantityNeeded', realName: 'quantityNeeded' },
            { name: 'quantityInvalid', realName: 'quantityInvalid' },
            { name: 'quantityRequested', realName: 'quantityRequested' },
            { name: 'quantityAllocated', realName: 'quantityAllocated' },
            { name: 'quantityTotal', realName: 'quantityTotal' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = InventoryItem;
