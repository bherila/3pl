/**
 * ProNimbusAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Results3
 */
class Results3 extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.scannerId = this.constructor.getValue(obj.scannerId || obj.scanner_id);
        this.ulCode = this.constructor.getValue(obj.ulCode || obj.ul_code);
        this.containerId = this.constructor.getValue(obj.containerId || obj.container_id);
        this.parcelId = this.constructor.getValue(obj.parcelId || obj.parcel_id);
        this.expectedWeight = this.constructor.getValue(obj.expectedWeight || obj.expected_weight);
        this.weight = this.constructor.getValue(obj.weight);
        this.units = this.constructor.getValue(obj.units);
        this.tolerance = this.constructor.getValue(obj.tolerance);
        this.routeDirection = this.constructor.getValue(obj.routeDirection || obj.route_direction);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'scannerId', realName: 'scanner_id' },
            { name: 'ulCode', realName: 'ul_code' },
            { name: 'containerId', realName: 'container_id' },
            { name: 'parcelId', realName: 'parcel_id' },
            { name: 'expectedWeight', realName: 'expected_weight' },
            { name: 'weight', realName: 'weight' },
            { name: 'units', realName: 'units' },
            { name: 'tolerance', realName: 'tolerance' },
            { name: 'routeDirection', realName: 'route_direction' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Results3;
