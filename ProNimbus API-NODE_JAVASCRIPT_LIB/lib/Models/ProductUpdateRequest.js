/**
 * ProNimbusAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of ProductUpdateRequest
 */
class ProductUpdateRequest extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.clientCode = this.constructor.getValue(obj.clientCode);
        this.productSku = this.constructor.getValue(obj.productSku);
        this.productName = this.constructor.getValue(obj.productName);
        this.shortDescription = this.constructor.getValue(obj.shortDescription);
        this.longDescription = this.constructor.getValue(obj.longDescription);
        this.labelDescription = this.constructor.getValue(obj.labelDescription);
        this.retailPrice = this.constructor.getValue(obj.retailPrice, '0.00');
        this.backorderWarning = this.constructor.getValue(obj.backorderWarning, 'N');
        this.backorderThreshold = this.constructor.getValue(obj.backorderThreshold);
        this.wineVintage = this.constructor.getValue(obj.wineVintage);
        this.pctAlcohol = this.constructor.getValue(obj.pctAlcohol);
        this.wineVineyard = this.constructor.getValue(obj.wineVineyard);
        this.wineCOLA = this.constructor.getValue(obj.wineCOLA);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'clientCode', realName: 'clientCode' },
            { name: 'productSku', realName: 'productSku' },
            { name: 'productName', realName: 'productName' },
            { name: 'shortDescription', realName: 'shortDescription' },
            { name: 'longDescription', realName: 'longDescription' },
            { name: 'labelDescription', realName: 'labelDescription' },
            { name: 'retailPrice', realName: 'retailPrice' },
            { name: 'backorderWarning', realName: 'backorderWarning' },
            { name: 'backorderThreshold', realName: 'backorderThreshold' },
            { name: 'wineVintage', realName: 'wineVintage' },
            { name: 'pctAlcohol', realName: 'pctAlcohol' },
            { name: 'wineVineyard', realName: 'wineVineyard' },
            { name: 'wineCOLA', realName: 'wineCOLA' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = ProductUpdateRequest;
