/**
 * ProNimbusAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const APIException = require('./APIException');
/**
 * Creates an instance of GenericError2Exception
 */
class GenericError2Exception extends APIException {
    /**
     * @constructor
     */
    constructor() {
        super();
        /**
         * A string indicating what kind of error occured.
         * * `isEmpty` - The indicated field is required and can't be empty
         * * `dateInvalidDate` - The value of the indicated field does not appear to be a valid date
         * * `noRecordFound` - There was no record found for the indicated field
         * * `unknownField` - The indicated field is not known for this call
         * * `notArray` - The indicated field must be an array
         * * `notObject` - The indicated field must be an object
         * * `parcelOverweight` - The parcel being checked weighs too much
         * * `parcelUnderweight` - The parcel being checked weighs too little
         * * `invalidClient` - the operation being attempted is not valid for the specified client
         */
        this.type = null;

        /**
         * A free-form description of the error
         */
        this.message = null;

        /**
         * An array containing a breadcrumb path to the parameter in error.
         * If the parameter in question is an array element, the index of the
         * element (starting with 0) will be included.
         */
        this.parameter = null;

        /**
         * If the field in error has a set of valid values that can be returned,
         * the values will be listed in this array
         */
        this.validValues = null;
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'type', realName: 'type' },
            { name: 'message', realName: 'message' },
            { name: 'parameter', realName: 'parameter', array: true },
            { name: 'validValues', realName: 'validValues', array: true },
        ]);
    }
}

module.exports = GenericError2Exception;
