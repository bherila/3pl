/*
 * pronimbusapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg

import "time"


/*
 * Structure for the custom type Response
 */
type Response struct {
    RejectedOrders  []*RejectedOrder `json:"rejectedOrders,omitempty" form:"rejectedOrders,omitempty"` //Array of rejected orders
    AcceptedOrders  []*AcceptedOrder `json:"acceptedOrders,omitempty" form:"acceptedOrders,omitempty"` //Array of accepted orders
}

/*
 * Structure for the custom type Results
 */
type Results struct {
    List            []*OrderStatusItem1 `json:"list,omitempty" form:"list,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type ProductUpdateResponseSuccess
 */
type ProductUpdateResponseSuccess struct {
    Status          Status1Enum     `json:"status,omitempty" form:"status,omitempty"` //The status of the call.
    Results         Results1        `json:"results,omitempty" form:"results,omitempty"` //TODO: Write general description for this field
    Errors          *interface{}    `json:"errors,omitempty" form:"errors,omitempty"` //An empty array that would contain objects describing what input parameters caused errors.
}

/*
 * Structure for the custom type ProductDetailsRequest
 */
type ProductDetailsRequest struct {
    ClientCode      string          `json:"clientCode" form:"clientCode"` //Unique client identifier
    Sku             *[]string       `json:"sku,omitempty" form:"sku,omitempty"` //A list of the SKUs to return details for. If omitted or the array is empty, returns details for **all** SKUs for the specified clientCode.
}

/*
 * Structure for the custom type ParcelStatusItem
 */
type ParcelStatusItem struct {
    StatusCode      *string         `json:"statusCode,omitempty" form:"statusCode,omitempty"` //TODO: Write general description for this field
    StatusMessage   *string         `json:"statusMessage,omitempty" form:"statusMessage,omitempty"` //TODO: Write general description for this field
    StatusDate      *string         `json:"statusDate,omitempty" form:"statusDate,omitempty"` //A date string, YYYY-MM-DD. If left blank, defaults to the current date.
}

/*
 * Structure for the custom type ParcelStatus1
 */
type ParcelStatus1 struct {
    CarrierTrackingNo  *string         `json:"carrierTrackingNo,omitempty" form:"carrierTrackingNo,omitempty"` //TODO: Write general description for this field
    InternalTrackingNo *string         `json:"internalTrackingNo,omitempty" form:"internalTrackingNo,omitempty"` //TODO: Write general description for this field
    Updates            []*ParcelStatusItem1 `json:"updates,omitempty" form:"updates,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type ParcelStatus
 */
type ParcelStatus struct {
    CarrierTrackingNo  *string         `json:"carrierTrackingNo,omitempty" form:"carrierTrackingNo,omitempty"` //TODO: Write general description for this field
    InternalTrackingNo *string         `json:"internalTrackingNo,omitempty" form:"internalTrackingNo,omitempty"` //TODO: Write general description for this field
    Updates            []*ParcelStatusItem `json:"updates,omitempty" form:"updates,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type ParcelCheckWeightGoodResponse
 */
type ParcelCheckWeightGoodResponse struct {
    Status          Status3Enum     `json:"status,omitempty" form:"status,omitempty"` //The status of the call.
    Results         Results3        `json:"results,omitempty" form:"results,omitempty"` //TODO: Write general description for this field
    Errors          []*GenericError `json:"errors,omitempty" form:"errors,omitempty"` //An array of objects describing what input parameters caused errors.
}

/*
 * Structure for the custom type OrderStatusResponse1
 */
type OrderStatusResponse1 struct {
    Status          StatusEnum      `json:"status,omitempty" form:"status,omitempty"` //The status of the call.
    Results         Results         `json:"results,omitempty" form:"results,omitempty"` //TODO: Write general description for this field
    Errors          []*GenericError `json:"errors,omitempty" form:"errors,omitempty"` //An array of objects describing what input parameters caused errors.
}

/*
 * Structure for the custom type OrderStatusRequest
 */
type OrderStatusRequest struct {
    ClientCode      string          `json:"clientCode" form:"clientCode"` //Unique client identifier
    DetailView      DetailViewEnum  `json:"detailView,omitempty" form:"detailView,omitempty"` //Return extra details in the response, not just the status of the order.
    OrderNo         []string        `json:"orderNo" form:"orderNo"` //List of orders
}

/*
 * Structure for the custom type OrderStatusResponse
 */
type OrderStatusResponse struct {
    Results         []*OrderStatusItem `json:"results,omitempty" form:"results,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type SalesOrderResponse
 */
type SalesOrderResponse struct {
    Response        Response        `json:"response,omitempty" form:"response,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Results5
 */
type Results5 struct {
    MessageCount    *int64          `json:"messageCount,omitempty" form:"messageCount,omitempty"` //Count of email messages sent
    EndTime         *time.Time      `json:"endTime,omitempty" form:"endTime,omitempty"` //TimeStamp of the last message sent during the specified timeframe,
    Messages        []*Message2     `json:"messages,omitempty" form:"messages,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Results1
 */
type Results1 struct {
    NumProductsUpdated *float64        `json:"numProductsUpdated,omitempty" form:"numProductsUpdated,omitempty"` //The number of products that were updated. Should be 0 or 1.
    WmsUpdateStatus    WmsUpdateStatusEnum `json:"wmsUpdateStatus,omitempty" form:"wmsUpdateStatus,omitempty"` //* `success` - if the product has been updated in all WMS instances
}

/*
 * Structure for the custom type Result2
 */
type Result2 struct {
    Code            *int64          `json:"code,omitempty" form:"code,omitempty"` //The HTTP response code from the WMS
    Answer          *string         `json:"answer,omitempty" form:"answer,omitempty"` //TODO: Write general description for this field
    Status          *string         `json:"status,omitempty" form:"status,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Result
 */
type Result struct {
    OrderNo         *string         `json:"orderNo,omitempty" form:"orderNo,omitempty"` //Customer order number.
    StatusCode      StatusCodeEnum  `json:"statusCode,omitempty" form:"statusCode,omitempty"` //TODO: Write general description for this field
    StatusMessage   *interface{}    `json:"statusMessage,omitempty" form:"statusMessage,omitempty"` //Either the string 'cancel successful', or an object describing the fields for each order that are in error.
}

/*
 * Structure for the custom type Orders
 */
type Orders struct {
    FormatVersion   *string         `json:"formatVersion,omitempty" form:"formatVersion,omitempty"` //Legacy for backward compatibility, has no effect.
    ClientCode      string          `json:"clientCode" form:"clientCode"` //Unique client identifier
    Order           []*Order        `json:"order" form:"order"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type OrderItem1
 */
type OrderItem1 struct {
    Sku             *string         `json:"sku,omitempty" form:"sku,omitempty"` //Unique identifier for an item.
    Quantity        *int64          `json:"quantity,omitempty" form:"quantity,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type RejectedOrderDescription
 */
type RejectedOrderDescription struct {
    DateInvalidDate *string         `json:"dateInvalidDate,omitempty" form:"dateInvalidDate,omitempty"` //The input does not appear to be a valid date
    IsEmpty         *string         `json:"isEmpty,omitempty" form:"isEmpty,omitempty"` //Value is required and can't be empty
    NoRecordFound   *string         `json:"noRecordFound,omitempty" form:"noRecordFound,omitempty"` //No corresponsing value was found for this enumerated data type.
    CallbackValue   *string         `json:"callbackValue,omitempty" form:"callbackValue,omitempty"` //This is the key for specialized validation for a given field. Please see the value of the string for the description of the validation error.  An example of an error that could appear as a `callbackValue` would be `The 'orderItems' field must be an array of order item records`
}

/*
 * Structure for the custom type InventoryItem
 */
type InventoryItem struct {
    Facility                   *string         `json:"facility,omitempty" form:"facility,omitempty"` //A code that defines a facility.
    Sku                        *string         `json:"sku,omitempty" form:"sku,omitempty"` //Unique identifier for an item.
    ErrorMessage               *interface{}    `json:"errorMessage,omitempty" form:"errorMessage,omitempty"` //An object describing the fields in the request that are in error. May contain multiple levels if the fields in error are part of a field that is an object. If there is no error this object is empty.
    QuantityOnHand             *int64          `json:"quantityOnHand,omitempty" form:"quantityOnHand,omitempty"` //A count of how much of this product is actually in the warehouse.  This count includes
    QuantityOnHold             *int64          `json:"quantityOnHold,omitempty" form:"quantityOnHold,omitempty"` //A count of how much of this product is on hold.
    QuantityDamaged            *int64          `json:"quantityDamaged,omitempty" form:"quantityDamaged,omitempty"` //A count of how much of this product is damaged.
    QuantityMissing            *int64          `json:"quantityMissing,omitempty" form:"quantityMissing,omitempty"` //A count of how much of this product is missing
    QuantityInventoryAllocated *int64          `json:"quantityInventoryAllocated,omitempty" form:"quantityInventoryAllocated,omitempty"` //A count of how much of this product has been assigned to an order and is "spoken for".
    QuantityAvailable          *int64          `json:"quantityAvailable,omitempty" form:"quantityAvailable,omitempty"` //A count of how much of this product is in the warehouse and is available to be allocated
    QuantityNotAllocated       *interface{}    `json:"quantityNotAllocated,omitempty" form:"quantityNotAllocated,omitempty"` //A count of how much of this product has been requested by an order but for some reason
    QuantityNeeded             *interface{}    `json:"quantityNeeded,omitempty" form:"quantityNeeded,omitempty"` //A count of how much more of this product beyond `quantityOnHold` is needed to fill all
    QuantityInvalid            *interface{}    `json:"quantityInvalid,omitempty" form:"quantityInvalid,omitempty"` //A count of how much of this product is requested by orders in an Invalid state.
    QuantityRequested          *interface{}    `json:"quantityRequested,omitempty" form:"quantityRequested,omitempty"` //A count of how much of this product has been requested by **VALID** orders in ProNimbus.
    QuantityAllocated          *interface{}    `json:"quantityAllocated,omitempty" form:"quantityAllocated,omitempty"` //A count of how much of this product has been requested by **VALID** orders in ProNimbus.
    QuantityTotal              *int64          `json:"quantityTotal,omitempty" form:"quantityTotal,omitempty"` //A count of how much of this product is actually in the warehouse.  This count includes
}

/*
 * Structure for the custom type Address2
 */
type Address2 struct {
    RecipientFirstName      *string         `json:"recipientFirstName,omitempty" form:"recipientFirstName,omitempty"` //The first name associated with the address.
    RecipientMiddleName     *string         `json:"recipientMiddleName,omitempty" form:"recipientMiddleName,omitempty"` //The middle name associated with the address.
    RecipientLastName       *string         `json:"recipientLastName,omitempty" form:"recipientLastName,omitempty"` //The last name associated with the address.
    Company                 *string         `json:"company,omitempty" form:"company,omitempty"` //The company name of the address.
    Address1                *string         `json:"address1,omitempty" form:"address1,omitempty"` //The required first line of the address.
    Address2                *string         `json:"address2,omitempty" form:"address2,omitempty"` //The optional second line of the address.
    City                    *string         `json:"city,omitempty" form:"city,omitempty"` //The city of the address.
    State                   *string         `json:"state,omitempty" form:"state,omitempty"` //The state code of the address.
    Country                 *string         `json:"country,omitempty" form:"country,omitempty"` //The two-character country code of the address.
    ZipCode                 *string         `json:"zipCode,omitempty" form:"zipCode,omitempty"` //The postal code of the address.
    Email                   *string         `json:"email,omitempty" form:"email,omitempty"` //Optional; if excluded, client will not receive email.
    WorkPhone               *string         `json:"workPhone,omitempty" form:"workPhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    HomePhone               *string         `json:"homePhone,omitempty" form:"homePhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    MobilePhone             *string         `json:"mobilePhone,omitempty" form:"mobilePhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    Dob                     *string         `json:"dob,omitempty" form:"dob,omitempty"` //A date string, YYYY-MM-DD. If left blank, defaults to the current date.
    BillRecipientFirstName  *string         `json:"billRecipientFirstName,omitempty" form:"billRecipientFirstName,omitempty"` //The first name associated with the address.
    BillRecipientMiddleName *string         `json:"billRecipientMiddleName,omitempty" form:"billRecipientMiddleName,omitempty"` //The middle name associated with the address.
    BillRecipientLastName   *string         `json:"billRecipientLastName,omitempty" form:"billRecipientLastName,omitempty"` //The last name associated with the address.
    BillCompany             *string         `json:"billCompany,omitempty" form:"billCompany,omitempty"` //The company name of the address.
    BillAddress1            *string         `json:"billAddress1,omitempty" form:"billAddress1,omitempty"` //The required first line of the address.
    BillAddress2            *string         `json:"billAddress2,omitempty" form:"billAddress2,omitempty"` //The optional second line of the address.
    BillCity                *string         `json:"billCity,omitempty" form:"billCity,omitempty"` //The city of the address.
    BillState               *string         `json:"billState,omitempty" form:"billState,omitempty"` //The state code of the address.
    BillCountry             *string         `json:"billCountry,omitempty" form:"billCountry,omitempty"` //The two-character country code of the address.
    BillZipCode             *string         `json:"billZipCode,omitempty" form:"billZipCode,omitempty"` //The postal code of the address.
    BillEmail               *string         `json:"billEmail,omitempty" form:"billEmail,omitempty"` //Optional; if excluded, client will not receive email.
    BillWorkPhone           *string         `json:"billWorkPhone,omitempty" form:"billWorkPhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    BillHomePhone           *string         `json:"billHomePhone,omitempty" form:"billHomePhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    BillMobilePhone         *string         `json:"billMobilePhone,omitempty" form:"billMobilePhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    BillDob                 *string         `json:"billDob,omitempty" form:"billDob,omitempty"` //A date string, YYYY-MM-DD. If left blank, defaults to the current date.
    AltLocationType         AltLocationTypeEnum `json:"altLocationType,omitempty" form:"altLocationType,omitempty"` //HAL for FedEx, ACP for UPS. Denotes type of pickup service.
    AltFirstName            *string         `json:"altFirstName,omitempty" form:"altFirstName,omitempty"` //The first name associated with the address.
    AltLastName             *string         `json:"altLastName,omitempty" form:"altLastName,omitempty"` //The last name associated with the address.
    AltCompany              *string         `json:"altCompany,omitempty" form:"altCompany,omitempty"` //The company name of the pickup location.
    AltAddress1             *string         `json:"altAddress1,omitempty" form:"altAddress1,omitempty"` //The required first line of the address.
    AltAddress2             *string         `json:"altAddress2,omitempty" form:"altAddress2,omitempty"` //The optional second line of the address.
    AltCity                 *string         `json:"altCity,omitempty" form:"altCity,omitempty"` //The city of the address.
    AltState                *string         `json:"altState,omitempty" form:"altState,omitempty"` //The state code of the address.
    AltZipCode              *string         `json:"altZipCode,omitempty" form:"altZipCode,omitempty"` //The postal code of the address.
    AltCountry              *string         `json:"altCountry,omitempty" form:"altCountry,omitempty"` //The two-character country code of the address.
    AltPhone                *string         `json:"altPhone,omitempty" form:"altPhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
}

/*
 * Structure for the custom type PickupAddress
 */
type PickupAddress struct {
    AlternateLocationType AltLocationTypeEnum `json:"alternateLocationType" form:"alternateLocationType"` //HAL for FedEx, ACP for UPS. Denotes type of pickup service.
    LocationId            *string         `json:"locationId,omitempty" form:"locationId,omitempty"` //The location ID for a UPS Access Point. Required for ACP deliveries.
    FirstName             string          `json:"firstName" form:"firstName"` //The first name of the recipient.
    LastName              string          `json:"lastName" form:"lastName"` //The last name of the recipient.
    Company               string          `json:"company" form:"company"` //The company name of the pickup location.
    Address1              string          `json:"address1" form:"address1"` //The address of the pickup location.
    Address2              *string         `json:"address2,omitempty" form:"address2,omitempty"` //The address of the pickup location.
    City                  string          `json:"city" form:"city"` //The city of the pickup location.
    State                 string          `json:"state" form:"state"` //The state code of the pickup location.
    PostalCode            string          `json:"postalCode" form:"postalCode"` //The postal code of the pickup location.
    Country               string          `json:"country" form:"country"` //The country code of the pickup location.
    Phone                 *string         `json:"phone,omitempty" form:"phone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
}

/*
 * Structure for the custom type ShippingAddress
 */
type ShippingAddress struct {
    FirstName       string          `json:"firstName" form:"firstName"` //The first name associated with the address.
    LastName        string          `json:"lastName" form:"lastName"` //The last name associated with the address.
    Company         *string         `json:"company,omitempty" form:"company,omitempty"` //The company name of the address.
    Address1        string          `json:"address1" form:"address1"` //The required first line of the address.
    Address2        *string         `json:"address2,omitempty" form:"address2,omitempty"` //The optional second line of the address.
    City            string          `json:"city" form:"city"` //The city of the address.
    State           string          `json:"state" form:"state"` //The state code of the address.
    PostalCode      string          `json:"postalCode" form:"postalCode"` //The postal code of the address.
    Country         string          `json:"country" form:"country"` //The two-character country code of the address.
    WorkPhone       *string         `json:"workPhone,omitempty" form:"workPhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    HomePhone       *string         `json:"homePhone,omitempty" form:"homePhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    MobilePhone     *string         `json:"mobilePhone,omitempty" form:"mobilePhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //Optional; if excluded, client will not receive email.
    Dob             *string         `json:"dob,omitempty" form:"dob,omitempty"` //A date string, YYYY-MM-DD. If left blank, defaults to no date.
}

/*
 * Structure for the custom type Address
 */
type Address struct {
    FirstName       string          `json:"firstName" form:"firstName"` //The first name associated with the address.
    LastName        string          `json:"lastName" form:"lastName"` //The last name associated with the address.
    Company         *string         `json:"company,omitempty" form:"company,omitempty"` //The company name of the address.
    Address1        string          `json:"address1" form:"address1"` //The required first line of the address.
    Address2        *string         `json:"address2,omitempty" form:"address2,omitempty"` //The optional second line of the address.
    City            string          `json:"city" form:"city"` //The city of the address.
    State           string          `json:"state" form:"state"` //The state code of the address.
    PostalCode      string          `json:"postalCode" form:"postalCode"` //The postal code of the address.
    Country         string          `json:"country" form:"country"` //The two-character country code of the address.
    WorkPhone       *string         `json:"workPhone,omitempty" form:"workPhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    HomePhone       *string         `json:"homePhone,omitempty" form:"homePhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    MobilePhone     *string         `json:"mobilePhone,omitempty" form:"mobilePhone,omitempty"` //A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //Optional; if excluded, client will not receive email.
}

/*
 * Structure for the custom type Order
 */
type Order struct {
    OrderNo             string          `json:"orderNo" form:"orderNo"` //Customer order number.
    OrderType           OrderTypeEnum   `json:"orderType,omitempty" form:"orderType,omitempty"` //Optional, overrides the default orderType of "N/A"
    BrandCode           *string         `json:"brandCode,omitempty" form:"brandCode,omitempty"` //A brand code associated with one of the client's brands
    SubClub             *string         `json:"subClub,omitempty" form:"subClub,omitempty"` //Legacy for backward compatibility; ignore
    OrderDate           string          `json:"orderDate" form:"orderDate"` //A date string, YYYY-MM-DD. If left blank, defaults to the current date.
    ShipMethod          ShipMethodEnum  `json:"shipMethod,omitempty" form:"shipMethod,omitempty"` //Optional, overrides the default carrier for this client and destination state. The provided shipMethod must exist in a valid route. Valid Values are
    FulfillmentType     FulfillmentTypeEnum `json:"fulfillmentType" form:"fulfillmentType"` //The fulfillment type for this order. The provided fulfillmentType must exist in a valid route.
    FulfillmentLocation *string         `json:"fulfillmentLocation,omitempty" form:"fulfillmentLocation,omitempty"` //A code that defines a facility.
    ManifestLocation    *string         `json:"manifestLocation,omitempty" form:"manifestLocation,omitempty"` //A code that defines a facility.
    TransferDestination *string         `json:"transferDestination,omitempty" form:"transferDestination,omitempty"` //A code that defines a facility. This field is only valid when `fulfillmentType` is `Transfer`; for all other fulfillment types it is ignored. When it *is* specified, the `shipToAddress` block may be omitted.
    RequestedShipDate   string          `json:"requestedShipDate" form:"requestedShipDate"` //A date string, YYYY-MM-DD. If left blank, defaults to the current date.
    ShipToAddress       ShippingAddress `json:"shipToAddress" form:"shipToAddress"` //TODO: Write general description for this field
    BillToAddress       Address         `json:"billToAddress,omitempty" form:"billToAddress,omitempty"` //TODO: Write general description for this field
    AltPickupAddress    PickupAddress   `json:"altPickupAddress,omitempty" form:"altPickupAddress,omitempty"` //TODO: Write general description for this field
    OnHoldMessage       *string         `json:"onHoldMessage,omitempty" form:"onHoldMessage,omitempty"` //Special instructions to the warehouse as to when to ship the order; flags order for review by CSR.
    SpecialInstructions *string         `json:"specialInstructions,omitempty" form:"specialInstructions,omitempty"` //Special instructions to the warehouse (e.g. include ice packs, etc.); flags order for review by CSR.
    DoNotReconfigure    *string         `json:"doNotReconfigure,omitempty" form:"doNotReconfigure,omitempty"` //Deprecated, do not use.
    LicenseType         *string         `json:"licenseType,omitempty" form:"licenseType,omitempty"` //Deprecated, do not use.
    Gift                GiftEnum        `json:"gift,omitempty" form:"gift,omitempty"` //Optional; required for legacy compatibility
    GiftMessage         *string         `json:"giftMessage,omitempty" form:"giftMessage,omitempty"` //Optional gift message printed on the shipping label. If not provided, defaults to null. Disregarded if gift not "Y"
    OrderNo3P           *string         `json:"orderNo3P,omitempty" form:"orderNo3P,omitempty"` //Optional. 3rd party order number, often times used when 3rd party applications may apply their own numbering system to the order.
    ShippingTotal       *float64        `json:"shippingTotal,omitempty" form:"shippingTotal,omitempty"` //Optional. Calculated shipping total for the order; used for compliance.
    FreightTax          *float64        `json:"freightTax,omitempty" form:"freightTax,omitempty"` //Optional. Applicable shipping tax for the order; should be calculated based on the state and product being shipped.
    AdditionalFields    *interface{}    `json:"additionalFields,omitempty" form:"additionalFields,omitempty"` //A JSON object with arbitrary fields. This is used to communicate special values for custom branded picksheets; the contents of this field are unvalidated by ProNimbus and will be ignored if they do not conform to the requirements of the branded picksheet corresponding to the brand indicated in the "brandCode" field.
    OrderItems          []*OrderItem    `json:"orderItems" form:"orderItems"` //An array of order item objects.
}

/*
 * Structure for the custom type Results4
 */
type Results4 struct {
    ScannerId       *string         `json:"scanner_id,omitempty" form:"scanner_id,omitempty"` //The ID of the scale performing the validation.
    UlCode          *string         `json:"ul_code,omitempty" form:"ul_code,omitempty"` //The tote ID of the parcel being validated.
    ContainerId     *string         `json:"container_id,omitempty" form:"container_id,omitempty"` //A synonym for `ul_code`. The tote ID of the parcel being validated.
    ParcelId        *int64          `json:"parcel_id,omitempty" form:"parcel_id,omitempty"` //The internal parcel ID of the parcel being validated.
    ExpectedWeight  *float64        `json:"expected_weight,omitempty" form:"expected_weight,omitempty"` //The expected weight for the parcel.
    Weight          *float64        `json:"weight,omitempty" form:"weight,omitempty"` //The weight that was passed into the validation call.
    Units           Units1Enum      `json:"units,omitempty" form:"units,omitempty"` //For future expansion. Currently, only weights in pounds are supported.
    Tolerance       *string         `json:"tolerance,omitempty" form:"tolerance,omitempty"` //The tolerance that was used to pass/fail the parcel, in `+NN.NN/-NN.NN` format.
    RouteDirection  RouteDirectionEnum `json:"route_direction,omitempty" form:"route_direction,omitempty"` //What an automated scale should do with the parcel
}

/*
 * Structure for the custom type Results3
 */
type Results3 struct {
    ScannerId       *string         `json:"scanner_id,omitempty" form:"scanner_id,omitempty"` //The ID of the scale performing the validation.
    UlCode          *string         `json:"ul_code,omitempty" form:"ul_code,omitempty"` //The tote ID of the parcel being validated.
    ContainerId     *string         `json:"container_id,omitempty" form:"container_id,omitempty"` //A synonym for `ul_code`. The tote ID of the parcel being validated.
    ParcelId        *int64          `json:"parcel_id,omitempty" form:"parcel_id,omitempty"` //The internal parcel ID of the parcel being validated.
    ExpectedWeight  *float64        `json:"expected_weight,omitempty" form:"expected_weight,omitempty"` //The expected weight for the parcel.
    Weight          *float64        `json:"weight,omitempty" form:"weight,omitempty"` //The weight that was passed into the validation call.
    Units           Units1Enum      `json:"units,omitempty" form:"units,omitempty"` //For future expansion. Currently, only weights in pounds are supported.
    Tolerance       *string         `json:"tolerance,omitempty" form:"tolerance,omitempty"` //The tolerance that was used to pass/fail the parcel, in `+NN.NN/-NN.NN` format.
    RouteDirection  RouteDirectionEnum `json:"route_direction,omitempty" form:"route_direction,omitempty"` //What an automated scale should do with the parcel
}

/*
 * Structure for the custom type Result1
 */
type Result1 struct {
    City            *string         `json:"City,omitempty" form:"City,omitempty"` //The city of the address.
    Distance        *float64        `json:"Distance,omitempty" form:"Distance,omitempty"` //The distance from the delivery address in the units specified by the "Units" field.
    Country         *string         `json:"Country,omitempty" form:"Country,omitempty"` //The two-character country code of the address.
    Company         *string         `json:"Company,omitempty" form:"Company,omitempty"` //The company name of the alternate pickup location.
    Units           Units3Enum      `json:"Units,omitempty" form:"Units,omitempty"` //Indicates the units for the "Distance" field.
    State           *string         `json:"State,omitempty" form:"State,omitempty"` //The state code of the address.
    AddressLine2    *string         `json:"AddressLine2,omitempty" form:"AddressLine2,omitempty"` //The optional second line of the address.
    AddressLine1    *string         `json:"AddressLine1,omitempty" form:"AddressLine1,omitempty"` //The required first line of the address.
    PostalCode      *string         `json:"PostalCode,omitempty" form:"PostalCode,omitempty"` //The postal code of the address.
}

/*
 * Structure for the custom type ProductUpdateRequest
 */
type ProductUpdateRequest struct {
    ClientCode         string          `json:"clientCode" form:"clientCode"` //Unique client identifier
    ProductSku         string          `json:"productSku" form:"productSku"` //Unique identifier for an item.
    ProductName        *string         `json:"productName,omitempty" form:"productName,omitempty"` //Name of the product.
    ShortDescription   *string         `json:"shortDescription,omitempty" form:"shortDescription,omitempty"` //Short description of the product.
    LongDescription    *string         `json:"longDescription,omitempty" form:"longDescription,omitempty"` //Long description of the product.
    LabelDescription   *string         `json:"labelDescription,omitempty" form:"labelDescription,omitempty"` //Label description for the product
    RetailPrice        *string         `json:"retailPrice,omitempty" form:"retailPrice,omitempty"` //Retail price per item for this SKU.
    BackorderWarning   BackorderWarningEnum `json:"backorderWarning,omitempty" form:"backorderWarning,omitempty"` //Turns on and off a warning when inventory for this SKU drops below a specified value.
    BackorderThreshold *int64          `json:"backorderThreshold,omitempty" form:"backorderThreshold,omitempty"` //An integer value greater than or equal to 0.
    WineVintage        *int64          `json:"wineVintage,omitempty" form:"wineVintage,omitempty"` //Defines the wine vintage.
    PctAlcohol         *float64        `json:"pctAlcohol,omitempty" form:"pctAlcohol,omitempty"` //Defines the percentage alcohol by volume (ABV).
    WineVineyard       *string         `json:"wineVineyard,omitempty" form:"wineVineyard,omitempty"` //Defines the vineyard where the wine was produced.
    WineCOLA           *string         `json:"wineCOLA,omitempty" form:"wineCOLA,omitempty"` //Defines the COLA number, if applicable, for compliance reasons.
}

/*
 * Structure for the custom type OrderStatusItem1
 */
type OrderStatusItem1 struct {
    SpecialInstructions *string         `json:"specialInstructions,omitempty" form:"specialInstructions,omitempty"` //Any special instructions for the order that may exist, including whether an order is on hold. This field may be blank. Only returned when the request object's detailView is set to 1.
    Address             Address2        `json:"address,omitempty" form:"address,omitempty"` //The address for the order. Only returned when the request object's detailView is set to 1.
    OrderItems          []*OrderItem1   `json:"orderItems,omitempty" form:"orderItems,omitempty"` //The address for the order. Only returned when the request object's detailView is set to 1.
    DeficientSkus       []*DeficientSku `json:"deficientSkus,omitempty" form:"deficientSkus,omitempty"` //Items in the order for which there is insufficient inventory.
    OrderNo             *string         `json:"orderNo,omitempty" form:"orderNo,omitempty"` //Customer order number.
    StatusCode          *string         `json:"statusCode,omitempty" form:"statusCode,omitempty"` //TODO: Write general description for this field
    StatusMessage       *string         `json:"statusMessage,omitempty" form:"statusMessage,omitempty"` //TODO: Write general description for this field
    CarrierId           *string         `json:"carrierId,omitempty" form:"carrierId,omitempty"` //TODO: Write general description for this field
    FulfillmentType     FulfillmentTypeEnum `json:"fulfillmentType,omitempty" form:"fulfillmentType,omitempty"` //The fulfillment type for this order. The provided fulfillmentType must exist in a valid route.
    ShipDate            *string         `json:"shipDate,omitempty" form:"shipDate,omitempty"` //A date string, YYYY-MM-DD. If left blank, defaults to the current date.
    OrderTrackingURL    *string         `json:"orderTrackingURL,omitempty" form:"orderTrackingURL,omitempty"` //URL to use in retrieving tracking information for the order.
    OnHold              OnHoldEnum      `json:"onHold,omitempty" form:"onHold,omitempty"` //Whether or not the order is on hold.
    Parcels             []*ParcelStatus1 `json:"parcels,omitempty" form:"parcels,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type OrderStatusItem
 */
type OrderStatusItem struct {
    SpecialInstructions *string         `json:"specialInstructions,omitempty" form:"specialInstructions,omitempty"` //Any special instructions for the order that may exist, including whether an order is on hold. This field may be blank. Only returned when the request object's detailView is set to 1.
    Address             Address2        `json:"address,omitempty" form:"address,omitempty"` //The address for the order. Only returned when the request object's detailView is set to 1.
    OrderItems          []*OrderItem1   `json:"orderItems,omitempty" form:"orderItems,omitempty"` //The address for the order. Only returned when the request object's detailView is set to 1.
    DeficientSkus       []*DeficientSku `json:"deficientSkus,omitempty" form:"deficientSkus,omitempty"` //Items in the order for which there is insufficient inventory.
    OrderNo             *string         `json:"orderNo,omitempty" form:"orderNo,omitempty"` //Customer order number.
    StatusCode          *string         `json:"statusCode,omitempty" form:"statusCode,omitempty"` //TODO: Write general description for this field
    StatusMessage       *string         `json:"statusMessage,omitempty" form:"statusMessage,omitempty"` //TODO: Write general description for this field
    CarrierId           *string         `json:"carrierId,omitempty" form:"carrierId,omitempty"` //TODO: Write general description for this field
    FulfillmentType     FulfillmentTypeEnum `json:"fulfillmentType,omitempty" form:"fulfillmentType,omitempty"` //The fulfillment type for this order. The provided fulfillmentType must exist in a valid route.
    ShipDate            *string         `json:"shipDate,omitempty" form:"shipDate,omitempty"` //A date string, YYYY-MM-DD. If left blank, defaults to the current date.
    OrderTrackingURL    *string         `json:"orderTrackingURL,omitempty" form:"orderTrackingURL,omitempty"` //URL to use in retrieving tracking information for the order.
    OnHold              OnHoldEnum      `json:"onHold,omitempty" form:"onHold,omitempty"` //Whether or not the order is on hold.
    Parcels             []*ParcelStatus `json:"parcels,omitempty" form:"parcels,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type OrderItem
 */
type OrderItem struct {
    ProductSKU      string          `json:"productSKU" form:"productSKU"` //Unique identifier for an item.
    Quantity        int64           `json:"quantity" form:"quantity"` //An integer value greater than or equal to 0.
    ProductSupplier *string         `json:"productSupplier,omitempty" form:"productSupplier,omitempty"` //If a product is supplied by a different client than the master client specified by the `clientCode` in the order, this field **must** be specified. If the value does not match the `clientCode` of a known client in the system, the order will be rejected by the API. If the value matches a known client but that client is not a supplier for the master client, the order will be accepted but marked invalid with an "Invalid Supplier" error.
    ProductName     *string         `json:"productName,omitempty" form:"productName,omitempty"` //Name of the product. If omitted, the product name defined for the SKU in ProNimbus will be used. **This field is deprecated.**
    Tax             *string         `json:"tax,omitempty" form:"tax,omitempty"` //For backward compatibility; **deprecated**
    Price           *string         `json:"price,omitempty" form:"price,omitempty"` //For backward compatibility; **deprecated**
    PctAlcohol      *string         `json:"pctAlcohol,omitempty" form:"pctAlcohol,omitempty"` //For backward compatibility; **deprecated**
    Weight          *float64        `json:"weight,omitempty" form:"weight,omitempty"` //For backward compatibility; **deprecated**
}

/*
 * Structure for the custom type BolInboundCreatePayload
 */
type BolInboundCreatePayload struct {
    ReferenceId           string          `json:"reference_id" form:"reference_id"` //TODO: Write general description for this field
    ClientId              string          `json:"client_id" form:"client_id"` //TODO: Write general description for this field
    ShipmentId            *string         `json:"shipment_id,omitempty" form:"shipment_id,omitempty"` //TODO: Write general description for this field
    DayOfDelivery         *time.Time      `json:"day_of_delivery,omitempty" form:"day_of_delivery,omitempty"` //TODO: Write general description for this field
    DayOfDeliveryUntil    *time.Time      `json:"day_of_delivery_until,omitempty" form:"day_of_delivery_until,omitempty"` //TODO: Write general description for this field
    DeliveryNoteNumber    *string         `json:"delivery_note_number,omitempty" form:"delivery_note_number,omitempty"` //TODO: Write general description for this field
    Type                  Type8Enum       `json:"type" form:"type"` //TODO: Write general description for this field
    Comment               *string         `json:"comment,omitempty" form:"comment,omitempty"` //TODO: Write general description for this field
    Supplier              *string         `json:"supplier,omitempty" form:"supplier,omitempty"` //TODO: Write general description for this field
    Positions             []*BolInboundRequestPosition `json:"positions" form:"positions"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Wine
 */
type Wine struct {
    ProductCreateRequest // Anonymous member to emulate model inheritence
    WineVintage     int64           `json:"wineVintage" form:"wineVintage"` //Defines the wine vintage.
    WineType        WineTypeEnum    `json:"wineType" form:"wineType"` //Defines the wine type and is used for compliance reasons.
    PctAlcohol      float64         `json:"pctAlcohol" form:"pctAlcohol"` //Defines the percentage alcohol by volume (ABV).
    WineOrigin      WineOriginEnum  `json:"wineOrigin" form:"wineOrigin"` //Defines the wine origin.
    WineVineyard    string          `json:"wineVineyard" form:"wineVineyard"` //Defines the vineyard where the wine was produced.
    WineBottleSize  float64         `json:"wineBottleSize" form:"wineBottleSize"` //Defines the bottle size. **Note:** this may differ from the slotEquivalent.
    WineCOLA        string          `json:"wineCOLA" form:"wineCOLA"` //Defines the COLA number, if applicable, for compliance reasons.
    WineVarietal    WineVarietalEnum `json:"wineVarietal,omitempty" form:"wineVarietal,omitempty"` //If productType = Wine, this field defines the wine varietal. [Download the YAML for this field](API_wineVarietal.yaml)
}

/*
 * Structure for the custom type ProductCreateRequest
 */
type ProductCreateRequest struct {
    ClientCode         string          `json:"clientCode" form:"clientCode"` //Unique client identifier
    ProductSku         string          `json:"productSku" form:"productSku"` //Unique identifier for an item.
    ProductType        *string         `json:"productType,omitempty" form:"productType,omitempty"` //TODO: Write general description for this field
    Container          string          `json:"container" form:"container"` //The container type for this SKU, will determine how SKU is handled by the warehouse.
    AmountPerContainer int64           `json:"amountPerContainer" form:"amountPerContainer"` //An integer value greater than or equal to 0.
    ProductName        string          `json:"productName" form:"productName"` //Name of the product.
    ShortDescription   string          `json:"shortDescription" form:"shortDescription"` //Short description of the product.
    LongDescription    *string         `json:"longDescription,omitempty" form:"longDescription,omitempty"` //Long description of the product.
    LabelDescription   *string         `json:"labelDescription,omitempty" form:"labelDescription,omitempty"` //Label description for the product
    BrandCode          *string         `json:"brandCode,omitempty" form:"brandCode,omitempty"` //A brand code associated with one of the client's brands
    RetailPrice        string          `json:"retailPrice" form:"retailPrice"` //Retail price per item for this SKU.
    BackorderWarning   BackorderWarningEnum `json:"backorderWarning,omitempty" form:"backorderWarning,omitempty"` //Turns on and off a warning when inventory for this SKU drops below a specified value.
    BackorderThreshold *int64          `json:"backorderThreshold,omitempty" form:"backorderThreshold,omitempty"` //An integer value greater than or equal to 0.
    ServiceFee         string          `json:"serviceFee" form:"serviceFee"` //Retail price per item for this SKU.
    Weight             float64         `json:"weight" form:"weight"` //The weight of the product in pounds.
    SlotEquivalent     SlotEquivalentEnum `json:"slotEquivalent" form:"slotEquivalent"` //The minimum size slot this product can be fit into.
    SlotCount          float64         `json:"slotCount" form:"slotCount"` //The number of slots of size `slotEquivalent` the product takes up.
}

/*
 * Structure for the custom type InventoryRequest
 */
type InventoryRequest struct {
    ClientCode      string          `json:"clientCode" form:"clientCode"` //Unique client identifier
    Facility        *string         `json:"facility,omitempty" form:"facility,omitempty"` //The code that defines the facility to return inventory records for. If omitted, returns inventory records for **all** facilities.
    Sku             *[]string       `json:"sku,omitempty" form:"sku,omitempty"` //List of SKUs to query inventory for. If omitted, returns inventory records for **all** SKUs in the facility specified.
}

/*
 * Structure for the custom type RejectedOrder
 */
type RejectedOrder struct {
    Status          *string         `json:"status,omitempty" form:"status,omitempty"` //The string 'failure'
    OrderNo         *string         `json:"orderNo,omitempty" form:"orderNo,omitempty"` //Customer order number.
    Description     *map[string]*RejectedOrderDescription `json:"description,omitempty" form:"description,omitempty"` //An object describing the fields for the order that are in error. May contain multiple levels if the fields in error are part of a field that is an object, like `shipToAddress`.
}

/*
 * Structure for the custom type InventoryResponse
 */
type InventoryResponse struct {
    Success         *bool           `json:"success,omitempty" form:"success,omitempty"` //This field is set to `true` if inventory records were found for **any** of the SKUs.
    Items           []*InventoryItem `json:"items,omitempty" form:"items,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type ProductDetailsResponse
 */
type ProductDetailsResponse struct {
    Code            *float64        `json:"code,omitempty" form:"code,omitempty"` //A numeric representation of the status of the call. Values possible in a successful response are
    Message         *string         `json:"message,omitempty" form:"message,omitempty"` //A string representation of the status of the call. Values possible in a unsuccessful response are
    Result          *map[string]*ProductDetailsItem `json:"result,omitempty" form:"result,omitempty"` //An object whose keys are `productSku` values and values are objects as defined in **\<additionalProperties\>**.
    Errors          *interface{}    `json:"errors,omitempty" form:"errors,omitempty"` //An object describing the fields in the request that are in error. May contain multiple levels if the fields in error are part of a field that is an object. If there is no error this object is empty.
}

/*
 * Structure for the custom type ProductDetailsItem
 */
type ProductDetailsItem struct {
    ProductSku      *string         `json:"productSku,omitempty" form:"productSku,omitempty"` //Unique identifier for an item.
    ProductType     ProductTypeEnum `json:"productType,omitempty" form:"productType,omitempty"` //The product type for this SKU, will determine other key values for the SKU.
    ProductName     *string         `json:"productName,omitempty" form:"productName,omitempty"` //Name of the product.
    BrandCode       *string         `json:"brandCode,omitempty" form:"brandCode,omitempty"` //A brand code associated with one of the client's brands
    Vintage         *int64          `json:"vintage,omitempty" form:"vintage,omitempty"` //Defines the wine vintage.
    Pending         PendingEnum     `json:"pending,omitempty" form:"pending,omitempty"` //Whether or not the product is in a pending state awaiting approval. Products in a pending state are considered an 'Unknown SKU' if they are used in orders.
}

/*
 * Structure for the custom type GetNotificationsResponse
 */
type GetNotificationsResponse struct {
    Results         []*Results5     `json:"results,omitempty" form:"results,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type ParcelStatusItem1
 */
type ParcelStatusItem1 struct {
    StatusCode      *string         `json:"statusCode,omitempty" form:"statusCode,omitempty"` //TODO: Write general description for this field
    StatusMessage   *string         `json:"statusMessage,omitempty" form:"statusMessage,omitempty"` //TODO: Write general description for this field
    StatusDate      *string         `json:"statusDate,omitempty" form:"statusDate,omitempty"` //A date string, YYYY-MM-DD. If left blank, defaults to the current date.
    City            *string         `json:"city,omitempty" form:"city,omitempty"` //The city of the address.
    State           *string         `json:"state,omitempty" form:"state,omitempty"` //The state code of the address.
}

/*
 * Structure for the custom type DeficientSku
 */
type DeficientSku struct {
    Sku             *string         `json:"sku,omitempty" form:"sku,omitempty"` //Unique identifier for an item.
    Quantity        *int64          `json:"quantity,omitempty" form:"quantity,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type CancelRequest
 */
type CancelRequest struct {
    ClientCode      *string         `json:"clientCode,omitempty" form:"clientCode,omitempty"` //Unique client identifier
    OrderNo         *[]string       `json:"orderNo,omitempty" form:"orderNo,omitempty"` //List of orders to cancel
}

/*
 * Structure for the custom type BolInboundCreateSuccessResponse
 */
type BolInboundCreateSuccessResponse struct {
    StatusCode      *int64          `json:"statusCode,omitempty" form:"statusCode,omitempty"` //TODO: Write general description for this field
    StatusMessage   *string         `json:"statusMessage,omitempty" form:"statusMessage,omitempty"` //TODO: Write general description for this field
    Result          Result2         `json:"result,omitempty" form:"result,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type BolInboundCreateRequest
 */
type BolInboundCreateRequest struct {
    Facility        string          `json:"facility" form:"facility"` //A code that defines a facility.
    Payload         []*BolInboundCreatePayload `json:"payload" form:"payload"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type CancelResponse
 */
type CancelResponse struct {
    Results         []*Result       `json:"results,omitempty" form:"results,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type AlternatePickupLocationsResponse
 */
type AlternatePickupLocationsResponse struct {
    Code            *float64        `json:"code,omitempty" form:"code,omitempty"` //TODO: Write general description for this field
    StatusMessage   *string         `json:"statusMessage,omitempty" form:"statusMessage,omitempty"` //TODO: Write general description for this field
    Result          []*Result1      `json:"result,omitempty" form:"result,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type AcceptedOrder
 */
type AcceptedOrder struct {
    Status          *string         `json:"status,omitempty" form:"status,omitempty"` //The string 'success'
    Description     *string         `json:"description,omitempty" form:"description,omitempty"` //The string 'SUCCESS'
    OrderNo         *string         `json:"orderNo,omitempty" form:"orderNo,omitempty"` //Customer order number.
}

/*
 * Structure for the custom type Message2
 */
type Message2 struct {
    OrderID         *string         `json:"orderID,omitempty" form:"orderID,omitempty"` //Customer order number.
    ToName          *string         `json:"toName,omitempty" form:"toName,omitempty"` //Name of email recipient
    ToEmail         *string         `json:"toEmail,omitempty" form:"toEmail,omitempty"` //Email address of email recipient
    FromName        *string         `json:"fromName,omitempty" form:"fromName,omitempty"` //Name of email sender
    FromEmail       *string         `json:"fromEmail,omitempty" form:"fromEmail,omitempty"` //Email address of email sender
    TimeSent        *time.Time      `json:"timeSent,omitempty" form:"timeSent,omitempty"` //Date/Time the email was sent
    MessageType     MessageTypeEnum `json:"messageType,omitempty" form:"messageType,omitempty"` //TODO: Write general description for this field
    Subject         *string         `json:"subject,omitempty" form:"subject,omitempty"` //Email subject line
    Body            *string         `json:"body,omitempty" form:"body,omitempty"` //Body of the email message
}

/*
 * Structure for the custom type ProductCreateResponse
 */
type ProductCreateResponse struct {
    Code            *int64          `json:"code,omitempty" form:"code,omitempty"` //TODO: Write general description for this field
    Message         MessageEnum     `json:"message,omitempty" form:"message,omitempty"` //TODO: Write general description for this field
    Errors          *interface{}    `json:"errors,omitempty" form:"errors,omitempty"` //An object describing the fields in the request that are in error. May contain multiple levels if the fields in error are part of a field that is an object. If there is no error this object is empty.
}

/*
 * Structure for the custom type Error
 */
type Error struct {
    Code            *int64          `json:"code,omitempty" form:"code,omitempty"` //TODO: Write general description for this field
    Message         *string         `json:"message,omitempty" form:"message,omitempty"` //TODO: Write general description for this field
    Fields          *string         `json:"fields,omitempty" form:"fields,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Location
 */
type Location struct {
    Address1        string          `json:"address1" form:"address1"` //The required first line of the address.
    Address2        *string         `json:"address2,omitempty" form:"address2,omitempty"` //The optional second line of the address.
    City            string          `json:"city" form:"city"` //The city of the address.
    State           string          `json:"state" form:"state"` //The state code of the address.
    PostalCode      string          `json:"postalCode" form:"postalCode"` //The postal code of the address.
    Country         string          `json:"country" form:"country"` //The two-character country code of the address.
}

/*
 * Structure for the custom type GetNotificationsRequest
 */
type GetNotificationsRequest struct {
    ClientCode      string          `json:"clientCode" form:"clientCode"` //Unique client identifier
    RequestType     RequestTypeEnum `json:"requestType" form:"requestType"` //TODO: Write general description for this field
    StartTime       *time.Time      `json:"startTime" form:"startTime"` //Return all consignee emails sent during the date/time interval starting at
    EndTime         *time.Time      `json:"endTime,omitempty" form:"endTime,omitempty"` //Optional. Defaults to the current time if omitted.
}

/*
 * Structure for the custom type GenericError
 */
type GenericError struct {
    Type            TypeEnum        `json:"type,omitempty" form:"type,omitempty"` //A string indicating what kind of error occured.
    Message         *string         `json:"message,omitempty" form:"message,omitempty"` //A free-form description of the error
    Parameter       *[]string       `json:"parameter,omitempty" form:"parameter,omitempty"` //An array containing a breadcrumb path to the parameter in error.
    ValidValues     *[]string       `json:"validValues,omitempty" form:"validValues,omitempty"` //If the field in error has a set of valid values that can be returned,
}

/*
 * Structure for the custom type BolInboundRequestPosition
 */
type BolInboundRequestPosition struct {
    ReferenceId       string          `json:"reference_id" form:"reference_id"` //TODO: Write general description for this field
    Sku               string          `json:"sku" form:"sku"` //TODO: Write general description for this field
    BoxId             *string         `json:"box_id,omitempty" form:"box_id,omitempty"` //TODO: Write general description for this field
    AmountOfBoxes     *int64          `json:"amount_of_boxes,omitempty" form:"amount_of_boxes,omitempty"` //TODO: Write general description for this field
    AmountOfBottles   *int64          `json:"amount_of_bottles,omitempty" form:"amount_of_bottles,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type AlternatePickupLocationsRequest
 */
type AlternatePickupLocationsRequest struct {
    ClientCode      string          `json:"clientCode" form:"clientCode"` //Unique client identifier
    LocationType    LocationTypeEnum `json:"locationType" form:"locationType"` //Type of alternate pickup location. Valid Values are
    Radius          int64           `json:"radius" form:"radius"` //The distance radius for the alternate location search.
    Limit           int64           `json:"limit" form:"limit"` //The maximum number of results to return. For ACP locations, the maximum number of results returned by UPS' API appears to be 10.
    Location        Location        `json:"location" form:"location"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Food
 */
type Food struct {
    ProductCreateRequest // Anonymous member to emulate model inheritence
    FoodType          FoodTypeEnum    `json:"foodType" form:"foodType"` //TODO: Write general description for this field
    FoodOrigin        *string         `json:"foodOrigin,omitempty" form:"foodOrigin,omitempty"` //Defines the location where this food originated.
    FoodRefrigeration FoodRefrigerationEnum `json:"foodRefrigeration,omitempty" form:"foodRefrigeration,omitempty"` //Defines whether or not this food requires refrigeration.
    FoodPerishable    FoodPerishableEnum `json:"foodPerishable,omitempty" form:"foodPerishable,omitempty"` //Defines whether or not this food is perishable and expiration dates must be tracked.
}

/*
 * Structure for the custom type TrackingItem
 */
type TrackingItem struct {
    StatusLocation  *string         `json:"statusLocation,omitempty" form:"statusLocation,omitempty"` //TODO: Write general description for this field
    StatusMessage   *string         `json:"statusMessage,omitempty" form:"statusMessage,omitempty"` //TODO: Write general description for this field
    StatusCode      *string         `json:"statusCode,omitempty" form:"statusCode,omitempty"` //TODO: Write general description for this field
    StatusDate      *string         `json:"statusDate,omitempty" form:"statusDate,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type TrackingResponseItem
 */
type TrackingResponseItem struct {
    StatusCode         *string         `json:"statusCode,omitempty" form:"statusCode,omitempty"` //TODO: Write general description for this field
    InternalTrackingNo *string         `json:"internalTrackingNo,omitempty" form:"internalTrackingNo,omitempty"` //TODO: Write general description for this field
    Updates            []*TrackingItem `json:"updates,omitempty" form:"updates,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type TrackingResponse
 */
type TrackingResponse struct {
    Results         []*TrackingResponseItem `json:"results,omitempty" form:"results,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Collateral
 */
type Collateral struct {
    ProductCreateRequest // Anonymous member to emulate model inheritence
    CollateralType  CollateralTypeEnum `json:"collateralType" form:"collateralType"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type TrackingRequest
 */
type TrackingRequest struct {
    InternalTrackingNo *[]string       `json:"internalTrackingNo,omitempty" form:"internalTrackingNo,omitempty"` //Internal Tracking Numbers
}
