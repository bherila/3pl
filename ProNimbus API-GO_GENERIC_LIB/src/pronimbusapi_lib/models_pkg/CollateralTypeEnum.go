/*
 * pronimbusapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg

import(
    "encoding/json"
)

/**
 * Type definition for CollateralTypeEnum enum
 */
type CollateralTypeEnum int

/**
 * Value collection for CollateralTypeEnum enum
 */
const (
    CollateralType_ENUM_FIT_IN_PACKING CollateralTypeEnum = 1 + iota
    CollateralType_ENUM_REQUIRES_CUBING
)

func (r CollateralTypeEnum) MarshalJSON() ([]byte, error) { 
    s := CollateralTypeEnumToValue(r)
    return json.Marshal(s) 
} 

func (r *CollateralTypeEnum) UnmarshalJSON(data []byte) error { 
    var s string 
    json.Unmarshal(data, &s)
    v :=  CollateralTypeEnumFromValue(s)
    *r = v 
    return nil 
 } 


/**
 * Converts CollateralTypeEnum to its string representation
 */
func CollateralTypeEnumToValue(collateralTypeEnum CollateralTypeEnum) string {
    switch collateralTypeEnum {
        case CollateralType_ENUM_FIT_IN_PACKING:
    		return "Enum_Fit in Packing"		
        case CollateralType_ENUM_REQUIRES_CUBING:
    		return "Enum_Requires Cubing"		
        default:
        	return "Enum_Fit in Packing"
    }
}

/**
 * Converts CollateralTypeEnum Array to its string Array representation
*/
func CollateralTypeEnumArrayToValue(collateralTypeEnum []CollateralTypeEnum) []string {
    convArray := make([]string,len( collateralTypeEnum))
    for i:=0; i<len(collateralTypeEnum);i++ {
        convArray[i] = CollateralTypeEnumToValue(collateralTypeEnum[i])
    }
    return convArray
}


/**
 * Converts given value to its enum representation
 */
func CollateralTypeEnumFromValue(value string) CollateralTypeEnum {
    switch value {
        case "Enum_Fit_in_Packing":
            return CollateralType_ENUM_FIT_IN_PACKING
        case "Enum_Requires_Cubing":
            return CollateralType_ENUM_REQUIRES_CUBING
        default:
            return CollateralType_ENUM_FIT IN PACKING
    }
}
