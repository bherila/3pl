/*
 * pronimbusapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg

import(
    "encoding/json"
)

/**
 * Type definition for MessageTypeEnum enum
 */
type MessageTypeEnum int

/**
 * Value collection for MessageTypeEnum enum
 */
const (
    MessageType_PROCESSED MessageTypeEnum = 1 + iota
    MessageType_SHIPPED
    MessageType_EXCEPTION
    MessageType_RETURNED
    MessageType_ENUM_DELIVERY_ATTEMPT
    MessageType_ENUM_OUT_FOR_DELIVERY
    MessageType_DELIVERED
)

func (r MessageTypeEnum) MarshalJSON() ([]byte, error) { 
    s := MessageTypeEnumToValue(r)
    return json.Marshal(s) 
} 

func (r *MessageTypeEnum) UnmarshalJSON(data []byte) error { 
    var s string 
    json.Unmarshal(data, &s)
    v :=  MessageTypeEnumFromValue(s)
    *r = v 
    return nil 
 } 


/**
 * Converts MessageTypeEnum to its string representation
 */
func MessageTypeEnumToValue(messageTypeEnum MessageTypeEnum) string {
    switch messageTypeEnum {
        case MessageType_PROCESSED:
    		return "Processed"		
        case MessageType_SHIPPED:
    		return "Shipped"		
        case MessageType_EXCEPTION:
    		return "Exception"		
        case MessageType_RETURNED:
    		return "Returned"		
        case MessageType_ENUM_DELIVERY_ATTEMPT:
    		return "Enum_Delivery Attempt"		
        case MessageType_ENUM_OUT_FOR_DELIVERY:
    		return "Enum_Out for Delivery"		
        case MessageType_DELIVERED:
    		return "Delivered"		
        default:
        	return "Processed"
    }
}

/**
 * Converts MessageTypeEnum Array to its string Array representation
*/
func MessageTypeEnumArrayToValue(messageTypeEnum []MessageTypeEnum) []string {
    convArray := make([]string,len( messageTypeEnum))
    for i:=0; i<len(messageTypeEnum);i++ {
        convArray[i] = MessageTypeEnumToValue(messageTypeEnum[i])
    }
    return convArray
}


/**
 * Converts given value to its enum representation
 */
func MessageTypeEnumFromValue(value string) MessageTypeEnum {
    switch value {
        case "Processed":
            return MessageType_PROCESSED
        case "Shipped":
            return MessageType_SHIPPED
        case "Exception":
            return MessageType_EXCEPTION
        case "Returned":
            return MessageType_RETURNED
        case "Enum_Delivery_Attempt":
            return MessageType_ENUM_DELIVERY_ATTEMPT
        case "Enum_Out_for_Delivery":
            return MessageType_ENUM_OUT_FOR_DELIVERY
        case "Delivered":
            return MessageType_DELIVERED
        default:
            return MessageType_PROCESSED
    }
}
