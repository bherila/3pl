/*
 * pronimbusapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package sku_pkg


import(
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"pronimbusapi_lib/apihelper_pkg"
	"pronimbusapi_lib/configuration_pkg"
	"pronimbusapi_lib/models_pkg"
)
/*
 * Client structure as interface implementation
 */
type SKU_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * RESTful web service to fetch information about SKUs.
 * [Download the YAML for this call](API_productDetails.yaml)
 * @param    *models_pkg.ProductDetailsRequest        request     parameter: Required
 * @return	Returns the *models_pkg.ProductDetailsResponse response from the API call
 */
func (me *SKU_IMPL) CreateProductDetailsWebService (
            request *models_pkg.ProductDetailsRequest) (*models_pkg.ProductDetailsResponse, error) {
    //the endpoint path uri
    _pathUrl := "/call/productDetails"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, request)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Response on Failure", _response.Code, _response.RawBody)
    } else if (_response.Code == 0) {
        err = apihelper_pkg.NewAPIError("Unexpected error", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ProductDetailsResponse = &models_pkg.ProductDetailsResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * RESTful web service to create new SKUs.
 * @param    *models_pkg.ProductCreateRequest        request     parameter: Required
 * @return	Returns the *models_pkg.ProductCreateResponse response from the API call
 */
func (me *SKU_IMPL) CreateProductCreateWebService (
            request *models_pkg.ProductCreateRequest) (*models_pkg.ProductCreateResponse, error) {
    //the endpoint path uri
    _pathUrl := "/call/productCreate"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, request)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Response on Failure", _response.Code, _response.RawBody)
    } else if (_response.Code == 0) {
        err = apihelper_pkg.NewAPIError("Unexpected error", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ProductCreateResponse = &models_pkg.ProductCreateResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * RESTful web service to update product information.
 * [Download the YAML for this call](API_product.yaml)
 * @param    *models_pkg.ProductUpdateRequest        request     parameter: Required
 * @return	Returns the *models_pkg.ProductUpdateResponseSuccess response from the API call
 */
func (me *SKU_IMPL) UpdateProductUpdate (
            request *models_pkg.ProductUpdateRequest) (*models_pkg.ProductUpdateResponseSuccess, error) {
    //the endpoint path uri
    _pathUrl := "/v2/product"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Patch(_queryBuilder, headers, request)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Response on Failure", _response.Code, _response.RawBody)
    } else if (_response.Code == 0) {
        err = apihelper_pkg.NewAPIError("Unexpected error", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ProductUpdateResponseSuccess = &models_pkg.ProductUpdateResponseSuccess{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

