/*
 * ProNimbusAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using ProNimbusAPI.Standard;
using ProNimbusAPI.Standard.Utilities;
using ProNimbusAPI.Standard.Http.Request;
using ProNimbusAPI.Standard.Http.Response;
using ProNimbusAPI.Standard.Http.Client;
using ProNimbusAPI.Standard.Exceptions;

namespace ProNimbusAPI.Standard.Controllers
{
    public partial class SalesOrderController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static SalesOrderController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static SalesOrderController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new SalesOrderController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// RESTful web service to get alternate pickup locations.
        /// [Download the YAML for this call](API_getAlternatePickupLocations.yaml)
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.AlternatePickupLocationsResponse response from the API call</return>
        public Models.AlternatePickupLocationsResponse AlternatePickupLocationWebService(Models.AlternatePickupLocationsRequest request)
        {
            Task<Models.AlternatePickupLocationsResponse> t = AlternatePickupLocationWebServiceAsync(request);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// RESTful web service to get alternate pickup locations.
        /// [Download the YAML for this call](API_getAlternatePickupLocations.yaml)
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.AlternatePickupLocationsResponse response from the API call</return>
        public async Task<Models.AlternatePickupLocationsResponse> AlternatePickupLocationWebServiceAsync(Models.AlternatePickupLocationsRequest request)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/call/getAlternatePickupLocations");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new AlternatePickupLocationsErrorResponseException(@"Response on Error", _context);

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new Error1Exception(@"Unexpected error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.AlternatePickupLocationsResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// RESTful web service to GET order status information.
        /// [Download the YAML for this call](API_getOrderStatus.yaml)
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.OrderStatusResponse response from the API call</return>
        public Models.OrderStatusResponse CreateOrderStatusWebService(Models.OrderStatusRequest request)
        {
            Task<Models.OrderStatusResponse> t = CreateOrderStatusWebServiceAsync(request);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// RESTful web service to GET order status information.
        /// [Download the YAML for this call](API_getOrderStatus.yaml)
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.OrderStatusResponse response from the API call</return>
        public async Task<Models.OrderStatusResponse> CreateOrderStatusWebServiceAsync(Models.OrderStatusRequest request)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/call/getOrderStatus");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new Error1Exception(@"Unexpected error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.OrderStatusResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// RESTful web service to cancel a specific order or multiple orders.
        /// [Download the YAML for this call](API_cancelOrder.yaml)
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.CancelResponse response from the API call</return>
        public Models.CancelResponse CreateCancelOrderWebService(Models.CancelRequest request)
        {
            Task<Models.CancelResponse> t = CreateCancelOrderWebServiceAsync(request);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// RESTful web service to cancel a specific order or multiple orders.
        /// [Download the YAML for this call](API_cancelOrder.yaml)
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.CancelResponse response from the API call</return>
        public async Task<Models.CancelResponse> CreateCancelOrderWebServiceAsync(Models.CancelRequest request)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/call/cancelOrder");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new Error1Exception(@"Unexpected error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CancelResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// RESTful web service to replace a specific order or multiple orders.
        /// [Download the YAML for this call](API_orderReplace.yaml)
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.SalesOrderResponse response from the API call</return>
        public Models.SalesOrderResponse CreateReplaceOrderWebService(Models.Orders request)
        {
            Task<Models.SalesOrderResponse> t = CreateReplaceOrderWebServiceAsync(request);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// RESTful web service to replace a specific order or multiple orders.
        /// [Download the YAML for this call](API_orderReplace.yaml)
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.SalesOrderResponse response from the API call</return>
        public async Task<Models.SalesOrderResponse> CreateReplaceOrderWebServiceAsync(Models.Orders request)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/call/orderReplace");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new Error1Exception(@"Unexpected error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SalesOrderResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// RESTful web service to get order status information.
        /// [Download the YAML for this call](API_order.yaml)
        /// </summary>
        /// <param name="clientCode">Required parameter: Unique client identifier</param>
        /// <param name="detailView">Optional parameter: Return extra details in the response, not just the status of the order.</param>
        /// <param name="startTime">Optional parameter: Return all orders during the date range starting at `startTime` and ending at `endTime`. Timestamp must be in [RFC3339](https://tools.ietf.org/html/rfc3339) format, i.e. `2018-02-18T00:00:00EST`.</param>
        /// <param name="endTime">Optional parameter: Required if `startTime` is specified. Return all orders during the date range starting at `startTime` and ending at `endTime`. Timestamp must be in [RFC3339](https://tools.ietf.org/html/rfc3339) format, i.e. `2018-02-18T00:00:00EST`.</param>
        /// <param name="orderNo">Optional parameter: Return the statuses of the specified orders.</param>
        /// <param name="limit">Optional parameter: Limit the number of results to the specified value.</param>
        /// <param name="offset">Optional parameter: Start returning results after skipping the specified number of results. Only valid when used in conjunction with `limit`; otherwise it is ignored.</param>
        /// <return>Returns the Models.OrderStatusResponse1 response from the API call</return>
        public Models.OrderStatusResponse1 GetOrderStatus(
                string clientCode,
                Models.DetailView1Enum? detailView = null,
                DateTime? startTime = null,
                DateTime? endTime = null,
                List<string> orderNo = null,
                int? limit = null,
                int? offset = null)
        {
            Task<Models.OrderStatusResponse1> t = GetOrderStatusAsync(clientCode, detailView, startTime, endTime, orderNo, limit, offset);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// RESTful web service to get order status information.
        /// [Download the YAML for this call](API_order.yaml)
        /// </summary>
        /// <param name="clientCode">Required parameter: Unique client identifier</param>
        /// <param name="detailView">Optional parameter: Return extra details in the response, not just the status of the order.</param>
        /// <param name="startTime">Optional parameter: Return all orders during the date range starting at `startTime` and ending at `endTime`. Timestamp must be in [RFC3339](https://tools.ietf.org/html/rfc3339) format, i.e. `2018-02-18T00:00:00EST`.</param>
        /// <param name="endTime">Optional parameter: Required if `startTime` is specified. Return all orders during the date range starting at `startTime` and ending at `endTime`. Timestamp must be in [RFC3339](https://tools.ietf.org/html/rfc3339) format, i.e. `2018-02-18T00:00:00EST`.</param>
        /// <param name="orderNo">Optional parameter: Return the statuses of the specified orders.</param>
        /// <param name="limit">Optional parameter: Limit the number of results to the specified value.</param>
        /// <param name="offset">Optional parameter: Start returning results after skipping the specified number of results. Only valid when used in conjunction with `limit`; otherwise it is ignored.</param>
        /// <return>Returns the Models.OrderStatusResponse1 response from the API call</return>
        public async Task<Models.OrderStatusResponse1> GetOrderStatusAsync(
                string clientCode,
                Models.DetailView1Enum? detailView = null,
                DateTime? startTime = null,
                DateTime? endTime = null,
                List<string> orderNo = null,
                int? limit = null,
                int? offset = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/order");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "clientCode", clientCode },
                { "detailView", (detailView.HasValue) ? Models.DetailView1EnumHelper.ToValue(detailView.Value) : null },
                { "startTime", (startTime.HasValue) ? startTime.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null },
                { "endTime", (endTime.HasValue) ? endTime.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null },
                { "orderNo", orderNo },
                { "limit", limit },
                { "offset", offset }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new OrderStatusResponse1ErrorException(@"Response on Failure", _context);

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new GenericError2Exception(@"Unexpected error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.OrderStatusResponse1>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// RESTful web service to validate the expected weight of a given parcel against a measured value.
        /// [Download the YAML for this call](API_parcel_getWeight.yaml)
        /// </summary>
        /// <param name="ulCode">Required parameter: The tote ID of the parcel being validated. Cannot be specified if `parcel_id` is specified.</param>
        /// <param name="containerId">Optional parameter: A synonym for `ul_code`; will be ignored if `ul_code` is specified. The tote ID of the parcel being validated.</param>
        /// <param name="parcelId">Optional parameter: The internal parcel ID of the parcel being validated. Must not be specified if `ul_code` or `container_id` are specified, but is REQUIRED if they are not.</param>
        /// <param name="scannerId">Optional parameter: The ID of the scale performing the validation.</param>
        /// <param name="weight">Optional parameter: The weight of the parcel being validated.</param>
        /// <param name="units">Optional parameter: (Optional) For future expansion. Currently, only weights in pounds are supported.</param>
        /// <return>Returns the Models.ParcelCheckWeightGoodResponse response from the API call</return>
        public Models.ParcelCheckWeightGoodResponse GetValidateParcelWeight(
                string ulCode,
                string containerId = null,
                long? parcelId = null,
                string scannerId = null,
                double? weight = null,
                Models.UnitsEnum? units = null)
        {
            Task<Models.ParcelCheckWeightGoodResponse> t = GetValidateParcelWeightAsync(ulCode, containerId, parcelId, scannerId, weight, units);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// RESTful web service to validate the expected weight of a given parcel against a measured value.
        /// [Download the YAML for this call](API_parcel_getWeight.yaml)
        /// </summary>
        /// <param name="ulCode">Required parameter: The tote ID of the parcel being validated. Cannot be specified if `parcel_id` is specified.</param>
        /// <param name="containerId">Optional parameter: A synonym for `ul_code`; will be ignored if `ul_code` is specified. The tote ID of the parcel being validated.</param>
        /// <param name="parcelId">Optional parameter: The internal parcel ID of the parcel being validated. Must not be specified if `ul_code` or `container_id` are specified, but is REQUIRED if they are not.</param>
        /// <param name="scannerId">Optional parameter: The ID of the scale performing the validation.</param>
        /// <param name="weight">Optional parameter: The weight of the parcel being validated.</param>
        /// <param name="units">Optional parameter: (Optional) For future expansion. Currently, only weights in pounds are supported.</param>
        /// <return>Returns the Models.ParcelCheckWeightGoodResponse response from the API call</return>
        public async Task<Models.ParcelCheckWeightGoodResponse> GetValidateParcelWeightAsync(
                string ulCode,
                string containerId = null,
                long? parcelId = null,
                string scannerId = null,
                double? weight = null,
                Models.UnitsEnum? units = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/parcel/checkWeight");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "ul_code", ulCode },
                { "container_id", containerId },
                { "parcel_id", parcelId },
                { "scanner_id", scannerId },
                { "weight", weight },
                { "units", (units.HasValue) ? Models.UnitsEnumHelper.ToValue(units.Value) : null }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new ParcelCheckWeightBadResponseException(@"Response on Failure", _context);

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new GenericError2Exception(@"Unexpected error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ParcelCheckWeightGoodResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// RESTful web service to POST orders.
        /// [Download the YAML for this call](API_processOrders.yaml)
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.SalesOrderResponse response from the API call</return>
        public Models.SalesOrderResponse CreateSalesOrderWebService(Models.Orders request)
        {
            Task<Models.SalesOrderResponse> t = CreateSalesOrderWebServiceAsync(request);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// RESTful web service to POST orders.
        /// [Download the YAML for this call](API_processOrders.yaml)
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the Models.SalesOrderResponse response from the API call</return>
        public async Task<Models.SalesOrderResponse> CreateSalesOrderWebServiceAsync(Models.Orders request)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/call/processOrders");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new Error1Exception(@"Unexpected error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SalesOrderResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 