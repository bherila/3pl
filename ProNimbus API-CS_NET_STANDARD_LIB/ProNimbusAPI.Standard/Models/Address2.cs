/*
 * ProNimbusAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using ProNimbusAPI.Standard;
using ProNimbusAPI.Standard.Utilities;


namespace ProNimbusAPI.Standard.Models
{
    public class Address2 : BaseModel 
    {
        // These fields hold the values for the public properties.
        private string recipientFirstName;
        private string recipientMiddleName;
        private string recipientLastName;
        private string company;
        private string address1;
        private string address2;
        private string city;
        private string state;
        private string country;
        private string zipCode;
        private string email;
        private string workPhone;
        private string homePhone;
        private string mobilePhone;
        private string dob;
        private string billRecipientFirstName;
        private string billRecipientMiddleName;
        private string billRecipientLastName;
        private string billCompany;
        private string billAddress1;
        private string billAddress2;
        private string billCity;
        private string billState;
        private string billCountry;
        private string billZipCode;
        private string billEmail;
        private string billWorkPhone;
        private string billHomePhone;
        private string billMobilePhone;
        private string billDob;
        private Models.AltLocationTypeEnum? altLocationType;
        private string altFirstName;
        private string altLastName;
        private string altCompany;
        private string altAddress1;
        private string altAddress2;
        private string altCity;
        private string altState;
        private string altZipCode;
        private string altCountry;
        private string altPhone;

        /// <summary>
        /// The first name associated with the address.
        /// </summary>
        [JsonProperty("recipientFirstName")]
        public string RecipientFirstName 
        { 
            get 
            {
                return this.recipientFirstName; 
            } 
            set 
            {
                this.recipientFirstName = value;
                onPropertyChanged("RecipientFirstName");
            }
        }

        /// <summary>
        /// The middle name associated with the address.
        /// </summary>
        [JsonProperty("recipientMiddleName")]
        public string RecipientMiddleName 
        { 
            get 
            {
                return this.recipientMiddleName; 
            } 
            set 
            {
                this.recipientMiddleName = value;
                onPropertyChanged("RecipientMiddleName");
            }
        }

        /// <summary>
        /// The last name associated with the address.
        /// </summary>
        [JsonProperty("recipientLastName")]
        public string RecipientLastName 
        { 
            get 
            {
                return this.recipientLastName; 
            } 
            set 
            {
                this.recipientLastName = value;
                onPropertyChanged("RecipientLastName");
            }
        }

        /// <summary>
        /// The company name of the address.
        /// </summary>
        [JsonProperty("company")]
        public string Company 
        { 
            get 
            {
                return this.company; 
            } 
            set 
            {
                this.company = value;
                onPropertyChanged("Company");
            }
        }

        /// <summary>
        /// The required first line of the address.
        /// </summary>
        [JsonProperty("address1")]
        public string Address1 
        { 
            get 
            {
                return this.address1; 
            } 
            set 
            {
                this.address1 = value;
                onPropertyChanged("Address1");
            }
        }

        /// <summary>
        /// The optional second line of the address.
        /// </summary>
        [JsonProperty("address2")]
        public string Address2Prop 
        { 
            get 
            {
                return this.address2; 
            } 
            set 
            {
                this.address2 = value;
                onPropertyChanged("Address2Prop");
            }
        }

        /// <summary>
        /// The city of the address.
        /// </summary>
        [JsonProperty("city")]
        public string City 
        { 
            get 
            {
                return this.city; 
            } 
            set 
            {
                this.city = value;
                onPropertyChanged("City");
            }
        }

        /// <summary>
        /// The state code of the address.
        /// </summary>
        [JsonProperty("state")]
        public string State 
        { 
            get 
            {
                return this.state; 
            } 
            set 
            {
                this.state = value;
                onPropertyChanged("State");
            }
        }

        /// <summary>
        /// The two-character country code of the address.
        /// </summary>
        [JsonProperty("country")]
        public string Country 
        { 
            get 
            {
                return this.country; 
            } 
            set 
            {
                this.country = value;
                onPropertyChanged("Country");
            }
        }

        /// <summary>
        /// The postal code of the address.
        /// </summary>
        [JsonProperty("zipCode")]
        public string ZipCode 
        { 
            get 
            {
                return this.zipCode; 
            } 
            set 
            {
                this.zipCode = value;
                onPropertyChanged("ZipCode");
            }
        }

        /// <summary>
        /// Optional; if excluded, client will not receive email.
        /// </summary>
        [JsonProperty("email")]
        public string Email 
        { 
            get 
            {
                return this.email; 
            } 
            set 
            {
                this.email = value;
                onPropertyChanged("Email");
            }
        }

        /// <summary>
        /// A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
        ///   * `(555) 123-4567`
        ///   * `(555)123-4567`
        ///   * `555-123-4567`
        ///   * `5551234567`
        /// </summary>
        [JsonProperty("workPhone")]
        public string WorkPhone 
        { 
            get 
            {
                return this.workPhone; 
            } 
            set 
            {
                this.workPhone = value;
                onPropertyChanged("WorkPhone");
            }
        }

        /// <summary>
        /// A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
        ///   * `(555) 123-4567`
        ///   * `(555)123-4567`
        ///   * `555-123-4567`
        ///   * `5551234567`
        /// </summary>
        [JsonProperty("homePhone")]
        public string HomePhone 
        { 
            get 
            {
                return this.homePhone; 
            } 
            set 
            {
                this.homePhone = value;
                onPropertyChanged("HomePhone");
            }
        }

        /// <summary>
        /// A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
        ///   * `(555) 123-4567`
        ///   * `(555)123-4567`
        ///   * `555-123-4567`
        ///   * `5551234567`
        /// </summary>
        [JsonProperty("mobilePhone")]
        public string MobilePhone 
        { 
            get 
            {
                return this.mobilePhone; 
            } 
            set 
            {
                this.mobilePhone = value;
                onPropertyChanged("MobilePhone");
            }
        }

        /// <summary>
        /// A date string, YYYY-MM-DD. If left blank, defaults to the current date.
        /// </summary>
        [JsonProperty("dob")]
        public string Dob 
        { 
            get 
            {
                return this.dob; 
            } 
            set 
            {
                this.dob = value;
                onPropertyChanged("Dob");
            }
        }

        /// <summary>
        /// The first name associated with the address.
        /// </summary>
        [JsonProperty("billRecipientFirstName")]
        public string BillRecipientFirstName 
        { 
            get 
            {
                return this.billRecipientFirstName; 
            } 
            set 
            {
                this.billRecipientFirstName = value;
                onPropertyChanged("BillRecipientFirstName");
            }
        }

        /// <summary>
        /// The middle name associated with the address.
        /// </summary>
        [JsonProperty("billRecipientMiddleName")]
        public string BillRecipientMiddleName 
        { 
            get 
            {
                return this.billRecipientMiddleName; 
            } 
            set 
            {
                this.billRecipientMiddleName = value;
                onPropertyChanged("BillRecipientMiddleName");
            }
        }

        /// <summary>
        /// The last name associated with the address.
        /// </summary>
        [JsonProperty("billRecipientLastName")]
        public string BillRecipientLastName 
        { 
            get 
            {
                return this.billRecipientLastName; 
            } 
            set 
            {
                this.billRecipientLastName = value;
                onPropertyChanged("BillRecipientLastName");
            }
        }

        /// <summary>
        /// The company name of the address.
        /// </summary>
        [JsonProperty("billCompany")]
        public string BillCompany 
        { 
            get 
            {
                return this.billCompany; 
            } 
            set 
            {
                this.billCompany = value;
                onPropertyChanged("BillCompany");
            }
        }

        /// <summary>
        /// The required first line of the address.
        /// </summary>
        [JsonProperty("billAddress1")]
        public string BillAddress1 
        { 
            get 
            {
                return this.billAddress1; 
            } 
            set 
            {
                this.billAddress1 = value;
                onPropertyChanged("BillAddress1");
            }
        }

        /// <summary>
        /// The optional second line of the address.
        /// </summary>
        [JsonProperty("billAddress2")]
        public string BillAddress2 
        { 
            get 
            {
                return this.billAddress2; 
            } 
            set 
            {
                this.billAddress2 = value;
                onPropertyChanged("BillAddress2");
            }
        }

        /// <summary>
        /// The city of the address.
        /// </summary>
        [JsonProperty("billCity")]
        public string BillCity 
        { 
            get 
            {
                return this.billCity; 
            } 
            set 
            {
                this.billCity = value;
                onPropertyChanged("BillCity");
            }
        }

        /// <summary>
        /// The state code of the address.
        /// </summary>
        [JsonProperty("billState")]
        public string BillState 
        { 
            get 
            {
                return this.billState; 
            } 
            set 
            {
                this.billState = value;
                onPropertyChanged("BillState");
            }
        }

        /// <summary>
        /// The two-character country code of the address.
        /// </summary>
        [JsonProperty("billCountry")]
        public string BillCountry 
        { 
            get 
            {
                return this.billCountry; 
            } 
            set 
            {
                this.billCountry = value;
                onPropertyChanged("BillCountry");
            }
        }

        /// <summary>
        /// The postal code of the address.
        /// </summary>
        [JsonProperty("billZipCode")]
        public string BillZipCode 
        { 
            get 
            {
                return this.billZipCode; 
            } 
            set 
            {
                this.billZipCode = value;
                onPropertyChanged("BillZipCode");
            }
        }

        /// <summary>
        /// Optional; if excluded, client will not receive email.
        /// </summary>
        [JsonProperty("billEmail")]
        public string BillEmail 
        { 
            get 
            {
                return this.billEmail; 
            } 
            set 
            {
                this.billEmail = value;
                onPropertyChanged("BillEmail");
            }
        }

        /// <summary>
        /// A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
        ///   * `(555) 123-4567`
        ///   * `(555)123-4567`
        ///   * `555-123-4567`
        ///   * `5551234567`
        /// </summary>
        [JsonProperty("billWorkPhone")]
        public string BillWorkPhone 
        { 
            get 
            {
                return this.billWorkPhone; 
            } 
            set 
            {
                this.billWorkPhone = value;
                onPropertyChanged("BillWorkPhone");
            }
        }

        /// <summary>
        /// A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
        ///   * `(555) 123-4567`
        ///   * `(555)123-4567`
        ///   * `555-123-4567`
        ///   * `5551234567`
        /// </summary>
        [JsonProperty("billHomePhone")]
        public string BillHomePhone 
        { 
            get 
            {
                return this.billHomePhone; 
            } 
            set 
            {
                this.billHomePhone = value;
                onPropertyChanged("BillHomePhone");
            }
        }

        /// <summary>
        /// A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
        ///   * `(555) 123-4567`
        ///   * `(555)123-4567`
        ///   * `555-123-4567`
        ///   * `5551234567`
        /// </summary>
        [JsonProperty("billMobilePhone")]
        public string BillMobilePhone 
        { 
            get 
            {
                return this.billMobilePhone; 
            } 
            set 
            {
                this.billMobilePhone = value;
                onPropertyChanged("BillMobilePhone");
            }
        }

        /// <summary>
        /// A date string, YYYY-MM-DD. If left blank, defaults to the current date.
        /// </summary>
        [JsonProperty("billDob")]
        public string BillDob 
        { 
            get 
            {
                return this.billDob; 
            } 
            set 
            {
                this.billDob = value;
                onPropertyChanged("BillDob");
            }
        }

        /// <summary>
        /// HAL for FedEx, ACP for UPS. Denotes type of pickup service.
        /// </summary>
        [JsonProperty("altLocationType", ItemConverterType = typeof(StringValuedEnumConverter))]
        public Models.AltLocationTypeEnum? AltLocationType 
        { 
            get 
            {
                return this.altLocationType; 
            } 
            set 
            {
                this.altLocationType = value;
                onPropertyChanged("AltLocationType");
            }
        }

        /// <summary>
        /// The first name associated with the address.
        /// </summary>
        [JsonProperty("altFirstName")]
        public string AltFirstName 
        { 
            get 
            {
                return this.altFirstName; 
            } 
            set 
            {
                this.altFirstName = value;
                onPropertyChanged("AltFirstName");
            }
        }

        /// <summary>
        /// The last name associated with the address.
        /// </summary>
        [JsonProperty("altLastName")]
        public string AltLastName 
        { 
            get 
            {
                return this.altLastName; 
            } 
            set 
            {
                this.altLastName = value;
                onPropertyChanged("AltLastName");
            }
        }

        /// <summary>
        /// The company name of the pickup location.
        /// </summary>
        [JsonProperty("altCompany")]
        public string AltCompany 
        { 
            get 
            {
                return this.altCompany; 
            } 
            set 
            {
                this.altCompany = value;
                onPropertyChanged("AltCompany");
            }
        }

        /// <summary>
        /// The required first line of the address.
        /// </summary>
        [JsonProperty("altAddress1")]
        public string AltAddress1 
        { 
            get 
            {
                return this.altAddress1; 
            } 
            set 
            {
                this.altAddress1 = value;
                onPropertyChanged("AltAddress1");
            }
        }

        /// <summary>
        /// The optional second line of the address.
        /// </summary>
        [JsonProperty("altAddress2")]
        public string AltAddress2 
        { 
            get 
            {
                return this.altAddress2; 
            } 
            set 
            {
                this.altAddress2 = value;
                onPropertyChanged("AltAddress2");
            }
        }

        /// <summary>
        /// The city of the address.
        /// </summary>
        [JsonProperty("altCity")]
        public string AltCity 
        { 
            get 
            {
                return this.altCity; 
            } 
            set 
            {
                this.altCity = value;
                onPropertyChanged("AltCity");
            }
        }

        /// <summary>
        /// The state code of the address.
        /// </summary>
        [JsonProperty("altState")]
        public string AltState 
        { 
            get 
            {
                return this.altState; 
            } 
            set 
            {
                this.altState = value;
                onPropertyChanged("AltState");
            }
        }

        /// <summary>
        /// The postal code of the address.
        /// </summary>
        [JsonProperty("altZipCode")]
        public string AltZipCode 
        { 
            get 
            {
                return this.altZipCode; 
            } 
            set 
            {
                this.altZipCode = value;
                onPropertyChanged("AltZipCode");
            }
        }

        /// <summary>
        /// The two-character country code of the address.
        /// </summary>
        [JsonProperty("altCountry")]
        public string AltCountry 
        { 
            get 
            {
                return this.altCountry; 
            } 
            set 
            {
                this.altCountry = value;
                onPropertyChanged("AltCountry");
            }
        }

        /// <summary>
        /// A phone number up to 10 numeric digits, other characters will be filtered out. Phone numbers with more than 10 numeric digits will be rejected. For example, the phone number (555) 123-4567 will be accepted in any of the following formats:
        ///   * `(555) 123-4567`
        ///   * `(555)123-4567`
        ///   * `555-123-4567`
        ///   * `5551234567`
        /// </summary>
        [JsonProperty("altPhone")]
        public string AltPhone 
        { 
            get 
            {
                return this.altPhone; 
            } 
            set 
            {
                this.altPhone = value;
                onPropertyChanged("AltPhone");
            }
        }
    }
} 