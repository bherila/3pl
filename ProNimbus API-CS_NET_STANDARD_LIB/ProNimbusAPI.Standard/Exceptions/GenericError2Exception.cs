/*
 * ProNimbusAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using ProNimbusAPI.Standard.Http.Client;

using ProNimbusAPI.Standard.Models;
using ProNimbusAPI.Standard;
using ProNimbusAPI.Standard.Utilities;


namespace ProNimbusAPI.Standard.Exceptions
{
    public class GenericError2Exception : APIException 
    {
        // These fields hold the values for the public properties.
        private Models.TypeEnum? type;
        private string message;
        private List<string> parameter;
        private List<string> validValues;

        /// <summary>
        /// A string indicating what kind of error occured.
        /// * `isEmpty` - The indicated field is required and can't be empty
        /// * `dateInvalidDate` - The value of the indicated field does not appear to be a valid date
        /// * `noRecordFound` - There was no record found for the indicated field
        /// * `unknownField` - The indicated field is not known for this call
        /// * `notArray` - The indicated field must be an array
        /// * `notObject` - The indicated field must be an object
        /// * `parcelOverweight` - The parcel being checked weighs too much
        /// * `parcelUnderweight` - The parcel being checked weighs too little
        /// * `invalidClient` - the operation being attempted is not valid for the specified client
        /// </summary>
        [JsonProperty("type", ItemConverterType = typeof(StringValuedEnumConverter))]
        public Models.TypeEnum? Type 
        { 
            get 
            {
                return this.type; 
            } 
            private set 
            {
                this.type = value;
            }
        }

        /// <summary>
        /// A free-form description of the error
        /// </summary>
        [JsonProperty("message")]
        public string Message 
        { 
            get 
            {
                return this.message; 
            } 
            private set 
            {
                this.message = value;
            }
        }

        /// <summary>
        /// An array containing a breadcrumb path to the parameter in error.
        /// If the parameter in question is an array element, the index of the
        /// element (starting with 0) will be included.
        /// </summary>
        [JsonProperty("parameter")]
        public List<string> Parameter 
        { 
            get 
            {
                return this.parameter; 
            } 
            private set 
            {
                this.parameter = value;
            }
        }

        /// <summary>
        /// If the field in error has a set of valid values that can be returned,
        /// the values will be listed in this array
        /// </summary>
        [JsonProperty("validValues")]
        public List<string> ValidValues 
        { 
            get 
            {
                return this.validValues; 
            } 
            private set 
            {
                this.validValues = value;
            }
        }

        /// <summary>
        /// Initialization constructor
        /// </summary>
        /// <param name="reason"> The reason for throwing exception </param>
        /// <param name="context"> The HTTP context that encapsulates request and response objects </param>
        public GenericError2Exception(string reason, HttpContext context)
            : base(reason, context)
        {
        }
    }
} 